
file = _{SOI ~ value ~ EOI}

statement = {
    let_binding |
    value ~ ";" |
    fndefn
}
block = { "{" ~ statement ~ (";" ~ value)* ~ "}" }

let_binding = {"let" ~ ident ~ "=" ~ value ~ ";"}

value = {op_item ~ binop_post*}
binop_post = {binop ~ op_item}

op_item = _{
    unit
    | "(" ~ value ~ ")"
    | block

    | fncall
    | lambda

    // Typed containers
    | struct_
    | option
    | named_tuple

    // Untyped containers
    | object
    | array

    // atoms
    | const_
    | ident
    | upper_ident
}
binop = { "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" }
option = {"None" | "Some" ~ "(" ~ value ~ ")"}

fncall = { ident ~ "(" ~ comma_values? ~ ")" }
lambda = { "|" ~ args ~ "|" ~ op_item }
fndefn = { "fn" ~ ident ~ "(" ~ args ~ ")" ~ block }

args = { (ident ~ ("," ~ ident)* ~ ","?)? }


unit = {"()"}

// TODO maybe punning?
struct_ = {
    upper_ident ~ "{" ~ comma_pairs ~ "}"
}

named_tuple = {
    upper_ident ~ "(" ~ comma_values ~ ")"
}

object = {
    "{" ~ comma_pairs? ~ "}"
}
comma_pairs = _{pair ~ ("," ~ pair)* ~ ","?}
pair = { (string | ident) ~ ":" ~ value }

array = {
    "[" ~ "]" |
    "[" ~ comma_values ~ "]"
}
comma_values = _{value ~ ("," ~ value)* ~ ","?}

json = _{object | array}









// implicit
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ line_comment | block_comment }
line_comment = { "//" ~ line_comment_inner ~ (NEWLINE | &EOI) }
line_comment_inner = { (!NEWLINE ~ ANY)* }
block_comment = { "/*" ~ (block_comment | block_comment_inner)  ~ "*/" }
block_comment_inner = { (!"*/" ~ ANY)* }





ident = @{ (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
upper_ident = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }

const_ = {float | signed_int | bool | char | string}

// booleans
bool = { "true" | "false" }

// numbers
sign = { "+" | "-" }

signed_int = @{ sign? ~ unsigned_int }
unsigned_int = { with_base | ASCII_DIGIT+ }
with_base = { "0" ~ ("x" | "b" | "o") ~ ASCII_HEX_DIGIT+ }

float = @{ float_std | float_frac }
float_std = { sign? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ float_exp? }
float_frac = { "." ~ ASCII_DIGIT+ ~ float_exp? }
float_exp = { ("e" | "E") ~ ASCII_DIGIT+ }

// chars
char = ${ "'" ~ char_inner ~ "'" }
char_inner = { "\\'" | (!"'" ~ ANY)* }

// strings
string = ${ string_std | string_raw }

string_std = { "\"" ~ string_std_inner ~ "\"" }
string_std_inner = { ("\\\"" | !"\"" ~ ANY)* }

string_raw = { "r" ~ PUSH("#"*) ~ "\"" ~ string_raw_inner ~ "\"" ~ POP }
string_raw_inner = { (!("\"" ~ PEEK) ~ ANY)* }


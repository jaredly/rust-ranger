// Here's a potential way to get this going.
// should I generate rust code from this code? No. Should I generate rust code to handle the types? probably also no.
// just interpret, and then do a serde from json? probably

ron_file = _{ SOI ~ block ~ EOI }

block = {statement* ~ value}

// scope = { "arg" ~ ident ~ ":" ~ typ ~ ";" }

statement = {fn_defn | assignment}
value = {op_item ~ (binop ~ op_item)*}
op_item = _{lambda | fn_call | option | ident | const_ | json}
option = {"None" | "Some" ~ "(" ~ value ~ ")"}
binop = { "*" | "+" | "-" | "/" }
// bin = { value ~ binop ~ value }

pattern = {"None" | "Some" ~ "(" ~ pattern ~ ")" | const_}

bool_op = {"==" | "!=" | "<" | ">"}
bool_exp = {bool_item ~ (bool_op ~ bool_item)*}
bool_item = {"(" ~ bool_exp ~ ")" | op_item}

assignment = { "let" ~ ident ~ "=" ~ value ~ ";" }
if_ = {"if" ~ bool_exp ~ "{" ~ block ~ "}" ~
		("else" ~ "{" ~ block ~ "}")?}
match_ = {"match" ~ value ~ "{" ~
    (pattern ~ "=>" ~ "{" ~ block ~ "}" ~ ",") * ~
    (pattern ~ "=>" ~ "{" ~ block ~ "}" ~ ","?) ~
"}"}
fn_call = {ident ~ "(" ~ (value ~ ",")* ~ value? ~ ")"}
fn_defn = {"fn" ~ ident ~ "(" ~ (arg_defn ~ ",")* ~ ")" ~ "{" ~ block ~ "}" }
lambda = {"|" ~ (arg_defn ~ ",")* ~ 
			arg_with_default? ~ "|" ~ "{" ~ block ~ "}" }
arg_defn = {ident ~ ":" ~ typ}
arg_with_default = {arg_defn ~ ("=" ~ value)?}
typ = {"int" | "string" | "float" | "bool" | "json" | option_typ}
option_typ = {"Option" ~ "<" ~ typ ~ ">"}





// How should I do this?

// mode 1: eval -- it needs to end with an expression, and maybe takes no args?
// mode 2: fn call -- parse & process some code, and then call a function that's defined in there.
// probably mode 2 makes more internal sense.


// OPEN QUESTIONS
// - should I just go with json instead of RON? It doesn't look like RON's `Value` supports enums and variants, so I'd have to round-trip back through 



// here's the RON format, where "value" is a RON value



// JSON spec

object = {
    "{" ~ "}" |
    "{" ~ pair ~ ("," ~ pair)* ~ "}"
}
pair = { (string | ident) ~ ":" ~ value }

array = {
    "[" ~ "]" |
    "[" ~ value ~ ("," ~ value)* ~ "]"
}

json = {object | array}









// implicit
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ line_comment | block_comment }
line_comment = { "//" ~ line_comment_inner ~ (NEWLINE | &EOI) }
line_comment_inner = { (!NEWLINE ~ ANY)* }
block_comment = { "/*" ~ (block_comment | block_comment_inner)  ~ "*/" }
block_comment_inner = { (!"*/" ~ ANY)* }





ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

const_ = {float | signed_int | bool | char | string}

// booleans
bool = { "true" | "false" }

// numbers
sign = { "+" | "-" }

signed_int = @{ sign? ~ unsigned_int }
unsigned_int = { with_base | ASCII_DIGIT+ }
with_base = { "0" ~ ("x" | "b" | "o") ~ ASCII_HEX_DIGIT+ }

float = @{ float_std | float_frac }
float_std = { sign? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ float_exp? }
float_frac = { "." ~ ASCII_DIGIT+ ~ float_exp? }
float_exp = { ("e" | "E") ~ ASCII_DIGIT+ }

// chars
char = ${ "'" ~ char_inner ~ "'" }
char_inner = { "\\'" | (!"'" ~ ANY)* }

// strings
string = ${ string_std | string_raw }

string_std = { "\"" ~ string_std_inner ~ "\"" }
string_std_inner = { ("\\\"" | !"\"" ~ ANY)* }

string_raw = { "r" ~ PUSH("#"*) ~ "\"" ~ string_raw_inner ~ "\"" ~ POP }
string_raw_inner = { (!("\"" ~ PEEK) ~ ANY)* }


/// UNUSED

// collections
ron_unused = { const_ | list | map | tuple_type | fields_type | unit_type }
list = {
    "[" ~
    (value ~ ("," ~ value)* ~ ","?)? ~
    "]"
}

map = {
    "{" ~
    (map_entry ~ ("," ~ map_entry)* ~ ","?)? ~
    "}"
}
map_entry = { value ~ ":" ~ value }


unit_type = { ident }
tuple_type = {
    ident? ~ "(" ~
    (value ~ ("," ~ value)* ~ ","?)? ~
    ")"
}

fields_type = {
    ident? ~ "(" ~
    (field ~ ("," ~ field)* ~ ","?)? ~
    ")"
}
field = { ident ~ ":" ~ value }
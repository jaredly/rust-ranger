Skeletons(
    // "leg_off_x": Fn(args: ["inv"], body: )
    fns: {
    },
    shared: {
        "run_freq": Plain(500),
        "vx_sin": 
        If(StrEq(key: "action", val: "jump"),
        Min(
            Div(Time, Plain(50)),
            Plain(4.0)
        ),
        // Mul(Sin(Mul(TAU, Div(Time, Shared("run_freq")))), Abs(Vx)),
        Mul(Sin(Mul(TAU, Div(Time, Shared("run_freq")))), Abs(Vx))
        )
        ,
        "vx_sin_half": Mul(Sin(Mul(TAU, Div(Time, Div(Shared("run_freq"), Plain(2))))), Abs(Vx)),
        "vx_cos_half": Mul(
            Mul(
                Add(Sin(Mul(TAU, Div(Time, Div(Shared("run_freq"), Plain(2))))), Plain(1)),
                Plain(0.5),
            ),
            Abs(Vx),
        ),
        "leg_pos": Plain(0.6),
        "body_offset": Mul(Abs(Shared("vx_sin")), Plain(0.04)),
    },
    shared_bones: {},
    skeletons: {
        "female": Skeleton(
            shape: Capsule(width: 0.1, height: 0.1),
            scale: 
        // If(StrEq(key: "action", val: "jump"),
        //     Plain(0.5),
            Plain(0.3),
        // ),
            offset: (Plain(0), Shared("body_offset")),
            bones: [
                Plain(
                    Bone(
                        sprite: "female_arm.png",
                        pivot_offset: (Plain(0), Plain(-0.3)),
                        offset: (Mul(Shared("vx_sin"), Plain(0.01)), Plain(-0.2)),
                        flip: StrEq(key: "facing", val: "right"),
                        rotation: Mul(Shared("vx_sin"), Plain(-10)),
                    ),
                ),
                Plain(
                    Bone(
                        sprite: "female_leg.png",
                        offset: (
                            Mul(Shared("vx_sin"), Plain(-0.05)),
                            Add(Shared("leg_pos"), Mul(Plain(-1), Shared("body_offset"))),
                        ),
                        pivot_offset: (Plain(0), Plain(-0.3)),
                        rotation: Mul(Shared("vx_sin"), Plain(5)),
                    ),
                ),
                Plain(
                    Bone(
                        sprite: "female_leg.png",
                        flip: StrEq(key: "facing", val: "right"),
                        offset: (
                            Mul(Shared("vx_sin"), Plain(0.05)),
                            Add(Shared("leg_pos"), Mul(Plain(-1), Shared("body_offset"))),
                        ),
                        pivot_offset: (Plain(0), Plain(-0.3)),
                        rotation: Mul(Shared("vx_sin"), Plain(-5)),
                    ),
                ),
                Plain(
                    Bone(
                        sprite: "female_body.png",
                        flip: StrEq(key: "facing", val: "right"),
                        offset: (Plain(0), Plain(0)),
                        rotation: Plain(0),
                        pivot_offset: (Plain(0), Plain(0)),
                    ),
                ),
                Plain(
                    Bone(
                        sprite: "female_head.png",
                        flip: If(
                            StrEq(key: "arm_action", val: "throw"),
                                                            // False,
                                // True,
Gt(
                                Var("throw_vx"),
                                Plain(0),
                            ),
                            StrEq(key: "facing", val: "right"),
                        ),
                        offset: (Plain(0), Plain(-0.8)),
                        pivot_offset: (Plain(-0.1), Plain(0)),
                        rotation: Plain(0),
                    ),
                ),
                StrMatch(
                    "arm_action",
                    {
                        "none": Plain(
                            Bone(
                                sprite: "female_arm.png",
                                flip: StrEq(key: "facing", val: "right"),
                                offset: (Mul(Shared("vx_sin"), Plain(-0.01)), Plain(-0.02)),
                                pivot_offset: (Plain(0), Plain(-0.3)),
                                rotation: Mul(Shared("vx_sin"), Plain(10)),
                            ),
                        ),
                        "throw": Plain(
                            Bone(
                                sprite: "female_arm.png",
                                flip: StrEq(key: "facing", val: "right"),
                                offset: (Plain(0), Plain(-0.2)),
                                pivot_offset: (Plain(0), Plain(-0.3)),
                                rotation: If(
                                    Gt(Var("throw_vx"), Plain(0)),
                                    Add(Mul(Div(Var("throw_theta"), PI), Plain(180)), Plain(180)),
                                    Mul(Div(Var("throw_theta"), PI), Plain(180)),
                                ),
                            ),
                        ),
                    },
                )                    // IfStrEq(key: "action", value: "walk", yes: , no: None),
,
            ],
        ),        /**
Ok what would a good system look like here?

// (define female_skeleton [])
it would be great to have a language that looks & feels like rust as much as possible.

rhai looks decent
but maybe doesn't separate parsing from evaluating
but I can do that. dunno how long that takes



*/

    },
)